<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>你过来啊！</title>
  
  <subtitle>性感Android开发，在线挨打</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://blog.xuqinmin.com/"/>
  <updated>2020-05-21T09:55:34.140Z</updated>
  <id>https://blog.xuqinmin.com/</id>
  
  <author>
    <name>Xuqm</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>CSS选择器学习记录</title>
    <link href="https://blog.xuqinmin.com/2020/05/21/CSS%E9%80%89%E6%8B%A9%E5%99%A8/"/>
    <id>https://blog.xuqinmin.com/2020/05/21/CSS%E9%80%89%E6%8B%A9%E5%99%A8/</id>
    <published>2020-05-21T09:46:57.000Z</published>
    <updated>2020-05-21T09:55:34.140Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Thu May 21 2020 17:56:00 GMT+0800 (GMT+08:00) --><blockquote><h5 id="现在各种跨平台框架挺流行的看了下都要使用jsemm"><a class="markdownIt-Anchor" href="#现在各种跨平台框架挺流行的看了下都要使用jsemm"></a> 现在各种跨平台框架挺流行的，看了下都要使用js，emm。。。</h5><h5 id="不会啊想着学习一下吧看着看着觉得还是把前端过一遍把找的资料是实验楼提供的资源"><a class="markdownIt-Anchor" href="#不会啊想着学习一下吧看着看着觉得还是把前端过一遍把找的资料是实验楼提供的资源"></a> 不会啊，想着学习一下吧，看着看着，觉得，还是把前端过一遍把，找的资料是<code>实验楼</code>提供的资源</h5></blockquote><h5 id="资料收集与以下网站如有冒犯烦请告知"><a class="markdownIt-Anchor" href="#资料收集与以下网站如有冒犯烦请告知"></a> 资料收集与以下网站，如有冒犯，烦请告知</h5><blockquote><p><a href="https://www.shiyanlou.com/courses/1237" target="_blank" rel="noopener">https://www.shiyanlou.com/courses/1237</a></p></blockquote><hr><blockquote><p>之前写的忘记记录，写到 <code>CSS选择器</code> 部分才想起来。</p></blockquote><h3 id="选择器分类"><a class="markdownIt-Anchor" href="#选择器分类"></a> 选择器分类</h3><table><thead><tr><th style="text-align:center">选择器类型</th><th>选择器内容</th></tr></thead><tbody><tr><td style="text-align:center">基础选择器</td><td>标签选择器、类选择器、id 选择器、 通配符选择器</td></tr><tr><td style="text-align:center">组合选择器</td><td>标签指定式选择器、后代选择器、并集选择器</td></tr><tr><td style="text-align:center">属性选择器</td><td></td></tr><tr><td style="text-align:center">伪类选择器</td><td></td></tr></tbody></table><h5 id="标签选择器"><a class="markdownIt-Anchor" href="#标签选择器"></a> 标签选择器</h5><blockquote><p>标签选择器也叫元素选择器，其实就是html代码中的标签<br>如：<code>&lt;html&gt; &lt;body&gt; &lt;h1&gt; &lt;p&gt; &lt;img&gt;</code></p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">标签名 &#123;</span><br><span class="line">    属性1:属性值1;</span><br><span class="line">    属性2:属性值2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="类选择器"><a class="markdownIt-Anchor" href="#类选择器"></a> 类选择器</h5><blockquote><p>类选择器是对HTML 标签中 <code>class</code> 属性进行选择。CSS 类选择器的选择符是 “.”<br>类选择器命名规范：不能是纯数字，不能是标签名，不建议使用汉字。一般是 点+对应样式的描述。<br>如：<code>.shadow</code></p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.bgc</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: yellow;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><blockquote><p>值得注意的是文档中的多个元素可以具有相同的类名，单个元素可以有多个类名(以空格分开多个类名的形式书写)。</p></blockquote><h5 id="id选择器"><a class="markdownIt-Anchor" href="#id选择器"></a> id选择器</h5><blockquote><p>对HTML 标签属性进行选择。id选择器的选择符是&quot;#&quot;。任何元素都可以使用id属性设置唯一的id名称。这是选择单个元素最有效的方式。</p><p>特别属性注意的是id选择器具有唯一性，也就是说同一个HTML页面不能有相同的id名称(使用多个相同的id选择器，浏览器不会报错但是不符合W3C标准)</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#id名&#123;</span><br><span class="line">属性1:属性值1;</span><br><span class="line">属性2:属性值2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="通配符选择器"><a class="markdownIt-Anchor" href="#通配符选择器"></a> 通配符选择器</h5><blockquote><p>通配符选择器用<code>*</code>号表示，他是所有选择器中作用范围最广的，能匹配页面中所有的元素。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">* &#123;</span><br><span class="line">    属性1:属性值1;</span><br><span class="line">    属性2:属性值2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>一般使用通配符选择器定义<code>CSS</code>样式,清楚所有<code>HTML</code>标记的默认边距。</p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">* &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="标签指定式选择器"><a class="markdownIt-Anchor" href="#标签指定式选择器"></a> 标签指定式选择器</h5><blockquote><p>标签指定式选择器又称交集选择器，有两个选择器构成，其中第一个必须是标签选择器，第二个为<code>class</code>选择器或<code>id</code>选择器。<br>两个选择器之间不能有空格。</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line">      p &#123;</span><br><span class="line">        color: red;</span><br><span class="line">      &#125;</span><br><span class="line"><span class="css">      <span class="selector-tag">p</span><span class="selector-class">.one</span> &#123;</span></span><br><span class="line">        color: blue;</span><br><span class="line">      &#125;</span><br><span class="line"><span class="css">      <span class="selector-tag">p</span><span class="selector-id">#two</span> &#123;</span></span><br><span class="line">        color: yellow;</span><br><span class="line">      &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>实验楼<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"one"</span>&gt;</span>实验楼<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"two"</span>&gt;</span>实验楼<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="后代选择器"><a class="markdownIt-Anchor" href="#后代选择器"></a> 后代选择器</h5><blockquote><p>后代选择器又叫包含选择器，用来选择元素或元素组的后代。<br>其写法就是把外层标记写在前面，内层标记写在后面，中间用空格分隔。当标记发生嵌套时，内层标记就成为外层标记的后代。</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line"><span class="css">      <span class="selector-class">.one</span> <span class="selector-id">#two</span> <span class="selector-tag">p</span> &#123;</span></span><br><span class="line">        color: red;</span><br><span class="line">      &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"one"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"two"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>实验楼<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="子代选择器"><a class="markdownIt-Anchor" href="#子代选择器"></a> 子代选择器</h5><blockquote><p>与后代选择器相比，子元素选择器只能选择某个元素的子元素。子选择器使用大于号作为子结合符。</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">      p &gt; strong &#123;</span><br><span class="line">        color: red;</span><br><span class="line">      &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">strong</span>&gt;</span>实验楼<span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">strong</span>&gt;</span>实验楼<span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">em</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">strong</span>&gt;</span>实验楼<span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">strong</span>&gt;</span>实验楼<span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">em</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="并集选择器"><a class="markdownIt-Anchor" href="#并集选择器"></a> 并集选择器</h5><blockquote><p>并集选择器是各个选择器通过逗号连接而成的，任何形式的选择器（包括标签选择器、class 类选择器、id 选择器等），都可以作为并集选择器的一部分。如果某些选择器定义的样式完全相同，或部分相同，就可以利用并集选择器为它们定义相同的 <code>CSS</code> 样式。</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">      p,</span><br><span class="line"><span class="css">      <span class="selector-id">#one</span>,</span></span><br><span class="line"><span class="css">      <span class="selector-class">.two</span> &#123;</span></span><br><span class="line">        color: red;</span><br><span class="line">      &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>我爱学习<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"one"</span>&gt;</span>我爱运动<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">strong</span> <span class="attr">class</span>=<span class="string">"two"</span>&gt;</span>我爱睡觉<span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="属性选择器"><a class="markdownIt-Anchor" href="#属性选择器"></a> 属性选择器</h5><blockquote><p>属性选择器是根据元素的属性及属性值来选择元素。</p></blockquote><table><thead><tr><th>属性选择器</th><th>含义</th><th>示例</th></tr></thead><tbody><tr><td>E[attr]</td><td>匹配所有具有attr属性的E元素，不考虑它的值。(E指的是元素，也就是标签，attr指的是属性)</td><td>p[title] {color: red;}</td></tr><tr><td>E[attr=val]</td><td>匹配所有attr属性等于&quot;val&quot;的E元素</td><td>p[title=“one”]{color: yellow;}</td></tr><tr><td>E[attr~=val]</td><td>匹配所有属性具有多个空格分隔的值，其中一个值等于&quot;val&quot;的E元素</td><td>td[class~=“name”]{color: #f00}</td></tr><tr><td>E[attr |= val]</td><td>匹配所有attr属性具有多个连字号分割的值、其中一个值以&quot;val&quot;开头的E元素，主要用于 lang属性，比如&quot;en&quot;、 “en-us”、 &quot;en-gb&quot;等等</td><td>p[lang |= en ]{color: blue;}</td></tr></tbody></table><h5 id="伪类选择器"><a class="markdownIt-Anchor" href="#伪类选择器"></a> 伪类选择器</h5><blockquote><p>CSS 伪类用于向某些选择器添加特殊的效果。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">:link 应用于未被访问过的链接。IE6 不兼容，解决此问题，直接使用 a 标签。</span><br><span class="line">:hover 应用于有鼠标指针悬停于其上的元素。在 IE6 只能应用于 a 连接，IE7+ 所有元素都兼容。</span><br><span class="line">:active 应用于被激活的元素，如被点击的链接、被按下的按钮等。</span><br><span class="line">:visited 应用于已经被访问过的链接</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line"><span class="css">      <span class="comment">/*a:link&#123;</span></span></span><br><span class="line">            color: red;</span><br><span class="line">        &#125;*/</span><br><span class="line"><span class="css">      <span class="comment">/*链接默认状态*/</span></span></span><br><span class="line">      a &#123;</span><br><span class="line">        color: red;</span><br><span class="line">        text-decoration: none;</span><br><span class="line">      &#125;</span><br><span class="line"><span class="css">      <span class="comment">/*链接访问之后的状态*/</span></span></span><br><span class="line"><span class="css">      <span class="selector-tag">a</span><span class="selector-pseudo">:visited</span> &#123;</span></span><br><span class="line">        color: yellow;</span><br><span class="line">      &#125;</span><br><span class="line"><span class="css">      <span class="comment">/*鼠标放到链接上显示的状态*/</span></span></span><br><span class="line"><span class="css">      <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line">        color: blue;</span><br><span class="line">        text-decoration: line-through;</span><br><span class="line">      &#125;</span><br><span class="line"><span class="css">      <span class="comment">/*链接激活的状态*/</span></span></span><br><span class="line"><span class="css">      <span class="selector-tag">a</span><span class="selector-pseudo">:active</span> &#123;</span></span><br><span class="line">        color: pink;</span><br><span class="line">      &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>实验楼<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>注：我们可能会遇到被点击访问过的超链接不再具有 <code>hover</code> 和 <code>active</code> 了，解决办法是改变 CSS 属性的排列顺序，<code>L-V-H-A</code>（link-visited-hover-active）。您可以运行一下，然后更改 <code>L-V-H-A</code> 的顺序后，看看效果。</p></blockquote><blockquote><p>后面还有 “CSS层叠性和继承性” 还没开始看，脑子有点昏，下次再看了。</p></blockquote><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Thu May 21 2020 17:56:00 GMT+0800 (GMT+08:00) --&gt;&lt;blockquote&gt;&lt;h5 id=&quot;现在各种跨平台框架挺流行的看了下都要使用jsemm&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot;
      
    
    </summary>
    
    
      <category term="前端" scheme="https://blog.xuqinmin.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="css" scheme="https://blog.xuqinmin.com/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>设计模式-建造者模式</title>
    <link href="https://blog.xuqinmin.com/2020/05/20/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%BB%BA%E9%80%A0%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
    <id>https://blog.xuqinmin.com/2020/05/20/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%BB%BA%E9%80%A0%E8%80%85%E6%A8%A1%E5%BC%8F/</id>
    <published>2020-05-20T07:47:27.000Z</published>
    <updated>2020-05-21T02:20:06.627Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Thu May 21 2020 17:56:00 GMT+0800 (GMT+08:00) --><blockquote><h5 id="最近在学习设计模式之前断断续续的看过好多自己也没有专门的练习和深入了解过一直感觉对应设计模式相关的东西还是处于懵懂状态这次下定决心好好的学习一下所以做一个笔记用来督促自己"><a class="markdownIt-Anchor" href="#最近在学习设计模式之前断断续续的看过好多自己也没有专门的练习和深入了解过一直感觉对应设计模式相关的东西还是处于懵懂状态这次下定决心好好的学习一下所以做一个笔记用来督促自己"></a> 最近在学习设计模式，之前断断续续的看过好多，自己也没有专门的练习和深入了解过，一直感觉对应设计模式相关的东西还是处于懵懂状态，这次下定决心好好的学习一下，所以做一个笔记用来督促自己。</h5></blockquote><h6 id="资料收集与以下网站如有冒犯烦请告知"><a class="markdownIt-Anchor" href="#资料收集与以下网站如有冒犯烦请告知"></a> 资料收集与以下网站，如有冒犯，烦请告知</h6><blockquote><p><a href="https://www.runoob.com/design-pattern/builder-pattern.html" target="_blank" rel="noopener">https://www.runoob.com/design-pattern/builder-pattern.html</a></p></blockquote><hr><h4 id="定义"><a class="markdownIt-Anchor" href="#定义"></a> 定义</h4><blockquote><p>The intent of the Builder design pattern is to separate the construction of a complex object from its representation. By doing so the same construction process can create different representations.<br>将一个复杂对象的构建与其表示分离，使得同样的构建过程可以创建不同的表示</p></blockquote><h4 id="简单说明"><a class="markdownIt-Anchor" href="#简单说明"></a> 简单说明</h4><p>1.当一个类的构建过于复杂的时候，就可以考虑builder模式了。</p><h4 id="上手试一下还是用coder的例子吧之前写了个简易的链式模式这次学习一下传统写法"><a class="markdownIt-Anchor" href="#上手试一下还是用coder的例子吧之前写了个简易的链式模式这次学习一下传统写法"></a> 上手试一下，还是用coder的例子吧,之前写了个简易的链式模式，这次学习一下传统写法。</h4><h5 id="1程序员基类"><a class="markdownIt-Anchor" href="#1程序员基类"></a> 1.程序员基类</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Coder</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;<span class="comment">//名称</span></span><br><span class="line">    <span class="keyword">private</span> String language;<span class="comment">//编程语言</span></span><br><span class="line">    <span class="keyword">private</span> String coding;<span class="comment">//编程能力</span></span><br><span class="line">    <span class="keyword">private</span> String writeBug;<span class="comment">//bug生产力</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLanguage</span><span class="params">(String language)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.language = language;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCoding</span><span class="params">(String coding)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.coding = coding;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setWriteBug</span><span class="params">(String writeBug)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.writeBug = writeBug;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.printf(<span class="string">"%s程序员，使用%s编程语言，%s，%s。"</span>, name, language, coding, writeBug);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2-builder类"><a class="markdownIt-Anchor" href="#2-builder类"></a> 2. Builder类</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Builder</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">setLanguage</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">setCoding</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">setWriteBug</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> Coder <span class="title">getCoder</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="3创建一个android程序员builder"><a class="markdownIt-Anchor" href="#3创建一个android程序员builder"></a> 3.创建一个Android程序员Builder</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AndroidBuilder</span> <span class="keyword">extends</span> <span class="title">Builder</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Coder coder = <span class="keyword">new</span> Coder();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        coder.setName(<span class="string">"Android"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLanguage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        coder.setLanguage(<span class="string">"Java"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCoding</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        coder.setCoding(<span class="string">"写了三行代码"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setWriteBug</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        coder.setWriteBug(<span class="string">"竟然没有bug"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Coder <span class="title">getCoder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> coder;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="4指导者类"><a class="markdownIt-Anchor" href="#4指导者类"></a> 4.指导者类</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CoderDirector</span> </span>&#123;<span class="comment">//指导者类</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">makeCoder</span><span class="params">(Builder builder)</span> </span>&#123;</span><br><span class="line">        builder.setName();</span><br><span class="line">        builder.setLanguage();</span><br><span class="line">        builder.setCoding();</span><br><span class="line">        builder.setWriteBug();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5使用一下"><a class="markdownIt-Anchor" href="#5使用一下"></a> 5.使用一下</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        CoderDirector director = <span class="keyword">new</span> CoderDirector();<span class="comment">//1</span></span><br><span class="line">        AndroidBuilder builder = <span class="keyword">new</span> AndroidBuilder();<span class="comment">//2</span></span><br><span class="line">        director.makeCoder(builder);<span class="comment">//3</span></span><br><span class="line">        Coder coder = builder.getCoder();<span class="comment">//4</span></span><br><span class="line">        coder.draw();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6输出信息"><a class="markdownIt-Anchor" href="#6输出信息"></a> 6.输出信息</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Android程序员，使用Java编程语言，写了三行代码，竟然没用bug。</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Thu May 21 2020 17:56:00 GMT+0800 (GMT+08:00) --&gt;&lt;blockquote&gt;&lt;h5 id=&quot;最近在学习设计模式之前断断续续的看过好多自己也没有专门的练习和深入了解过一直感觉对应设计模式相关的东西还是处于
      
    
    </summary>
    
    
      <category term="设计模式" scheme="https://blog.xuqinmin.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="android" scheme="https://blog.xuqinmin.com/tags/android/"/>
    
      <category term="java" scheme="https://blog.xuqinmin.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>设计模式-建造者模式(简化-链式)</title>
    <link href="https://blog.xuqinmin.com/2020/05/20/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%BB%BA%E9%80%A0%E8%80%85%E6%A8%A1%E5%BC%8F-%E7%AE%80%E6%98%93%E6%A8%A1%E5%BC%8F/"/>
    <id>https://blog.xuqinmin.com/2020/05/20/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%BB%BA%E9%80%A0%E8%80%85%E6%A8%A1%E5%BC%8F-%E7%AE%80%E6%98%93%E6%A8%A1%E5%BC%8F/</id>
    <published>2020-05-20T06:46:57.000Z</published>
    <updated>2020-05-20T08:13:42.097Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Thu May 21 2020 17:56:00 GMT+0800 (GMT+08:00) --><blockquote><h5 id="最近在学习设计模式之前断断续续的看过好多自己也没有专门的练习和深入了解过一直感觉对应设计模式相关的东西还是处于懵懂状态这次下定决心好好的学习一下所以做一个笔记用来督促自己"><a class="markdownIt-Anchor" href="#最近在学习设计模式之前断断续续的看过好多自己也没有专门的练习和深入了解过一直感觉对应设计模式相关的东西还是处于懵懂状态这次下定决心好好的学习一下所以做一个笔记用来督促自己"></a> 最近在学习设计模式，之前断断续续的看过好多，自己也没有专门的练习和深入了解过，一直感觉对应设计模式相关的东西还是处于懵懂状态，这次下定决心好好的学习一下，所以做一个笔记用来督促自己。</h5></blockquote><h6 id="资料收集与以下网站如有冒犯烦请告知"><a class="markdownIt-Anchor" href="#资料收集与以下网站如有冒犯烦请告知"></a> 资料收集与以下网站，如有冒犯，烦请告知</h6><blockquote><p><a href="https://www.runoob.com/design-pattern/builder-pattern.html" target="_blank" rel="noopener">https://www.runoob.com/design-pattern/builder-pattern.html</a></p></blockquote><hr><h4 id="定义"><a class="markdownIt-Anchor" href="#定义"></a> 定义</h4><blockquote><p>The intent of the Builder design pattern is to separate the construction of a complex object from its representation. By doing so the same construction process can create different representations.<br>将一个复杂对象的构建与其表示分离，使得同样的构建过程可以创建不同的表示</p></blockquote><h4 id="简单说明"><a class="markdownIt-Anchor" href="#简单说明"></a> 简单说明</h4><p>1.当一个类的构建过于复杂的时候，就可以考虑builder模式了。</p><h4 id="上手试一下还是用coder的例子吧"><a class="markdownIt-Anchor" href="#上手试一下还是用coder的例子吧"></a> 上手试一下，还是用coder的例子吧</h4><h5 id="1程序员基类"><a class="markdownIt-Anchor" href="#1程序员基类"></a> 1.程序员基类</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Coder</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;<span class="comment">//名称</span></span><br><span class="line">    <span class="keyword">private</span> String language;<span class="comment">//使用的语言</span></span><br><span class="line">    <span class="keyword">private</span> String coding;<span class="comment">//编程能力</span></span><br><span class="line">    <span class="keyword">private</span> String writeBug;<span class="comment">//bug生成能力</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Coder</span><span class="params">(Builder builder)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = builder.getName();</span><br><span class="line">        <span class="keyword">this</span>.language = builder.getLanguage();</span><br><span class="line">        <span class="keyword">this</span>.coding = builder.getCoding();</span><br><span class="line">        <span class="keyword">this</span>.writeBug = builder.getWriteBug();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.printf(<span class="string">"%s程序员，使用%s编程语言，%s，%s。"</span>, name, language, coding, writeBug);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2builder-类"><a class="markdownIt-Anchor" href="#2builder-类"></a> 2.builder 类</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Builder</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String language;</span><br><span class="line">    <span class="keyword">private</span> String coding;</span><br><span class="line">    <span class="keyword">private</span> String writeBug;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Builder <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Builder <span class="title">setLanguage</span><span class="params">(String language)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.language = language;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Builder <span class="title">setCoding</span><span class="params">(String coding)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.coding = coding;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Builder <span class="title">setWriteBug</span><span class="params">(String writeBug)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.writeBug = writeBug;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getLanguage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> language;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getCoding</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> coding;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getWriteBug</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> writeBug;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Coder <span class="title">build</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Coder(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="3使用一下"><a class="markdownIt-Anchor" href="#3使用一下"></a> 3.使用一下</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Coder coder = <span class="keyword">new</span> Builder()</span><br><span class="line">                .setCoding(<span class="string">"写了一行代码"</span>)</span><br><span class="line">                .setLanguage(<span class="string">"Java"</span>)</span><br><span class="line">                .setName(<span class="string">"Android"</span>)</span><br><span class="line">                .setWriteBug(<span class="string">"没有bug"</span>)</span><br><span class="line">                .build();</span><br><span class="line">        coder.draw();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="4输出信息"><a class="markdownIt-Anchor" href="#4输出信息"></a> 4.输出信息</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Android程序员，使用Java编程语言，写了一行代码，没有bug。</span><br></pre></td></tr></table></figure><h3 id="换一个写法"><a class="markdownIt-Anchor" href="#换一个写法"></a> 换一个写法</h3><h5 id="1coder"><a class="markdownIt-Anchor" href="#1coder"></a> 1.coder</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Coder</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String language;</span><br><span class="line">    <span class="keyword">private</span> String coding;</span><br><span class="line">    <span class="keyword">private</span> String writeBug;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Coder</span><span class="params">(Builder builder)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = builder.name;</span><br><span class="line">        <span class="keyword">this</span>.language = builder.language;</span><br><span class="line">        <span class="keyword">this</span>.coding = builder.coding;</span><br><span class="line">        <span class="keyword">this</span>.writeBug = builder.writeBug;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.printf(<span class="string">"%s程序员，使用%s编程语言，%s，%s。"</span>, name, language, coding, writeBug);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Builder</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> String name;</span><br><span class="line">        <span class="keyword">private</span> String language;</span><br><span class="line">        <span class="keyword">private</span> String coding;</span><br><span class="line">        <span class="keyword">private</span> String writeBug;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Builder <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.name = name;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Builder <span class="title">setLanguage</span><span class="params">(String language)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.language = language;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Builder <span class="title">setCoding</span><span class="params">(String coding)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.coding = coding;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Builder <span class="title">setWriteBug</span><span class="params">(String writeBug)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.writeBug = writeBug;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Coder <span class="title">build</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Coder(<span class="keyword">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2使用方式"><a class="markdownIt-Anchor" href="#2使用方式"></a> 2.使用方式</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Coder coder = <span class="keyword">new</span> Coder.Builder()</span><br><span class="line">                .setCoding(<span class="string">"写了一行代码"</span>)</span><br><span class="line">                .setLanguage(<span class="string">"Java"</span>)</span><br><span class="line">                .setName(<span class="string">"Android"</span>)</span><br><span class="line">                .setWriteBug(<span class="string">"没有bug"</span>)</span><br><span class="line">                .build();</span><br><span class="line">        coder.draw();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Thu May 21 2020 17:56:00 GMT+0800 (GMT+08:00) --&gt;&lt;blockquote&gt;&lt;h5 id=&quot;最近在学习设计模式之前断断续续的看过好多自己也没有专门的练习和深入了解过一直感觉对应设计模式相关的东西还是处于
      
    
    </summary>
    
    
      <category term="设计模式" scheme="https://blog.xuqinmin.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="android" scheme="https://blog.xuqinmin.com/tags/android/"/>
    
      <category term="java" scheme="https://blog.xuqinmin.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>Android开发整理---Jetpack学习记录001</title>
    <link href="https://blog.xuqinmin.com/2020/05/20/Android%E5%BC%80%E5%8F%91%E6%95%B4%E7%90%86---Jetpack%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95001/"/>
    <id>https://blog.xuqinmin.com/2020/05/20/Android%E5%BC%80%E5%8F%91%E6%95%B4%E7%90%86---Jetpack%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95001/</id>
    <published>2020-05-20T05:54:35.000Z</published>
    <updated>2020-05-20T05:58:23.399Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Thu May 21 2020 17:56:00 GMT+0800 (GMT+08:00) --><blockquote></blockquote><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Thu May 21 2020 17:56:00 GMT+0800 (GMT+08:00) --&gt;&lt;blockquote&gt;&lt;/blockquote&gt;&lt;!-- rebuild by neat --&gt;
      
    
    </summary>
    
    
      <category term="Android" scheme="https://blog.xuqinmin.com/categories/Android/"/>
    
    
      <category term="android" scheme="https://blog.xuqinmin.com/tags/android/"/>
    
      <category term="kotlin" scheme="https://blog.xuqinmin.com/tags/kotlin/"/>
    
  </entry>
  
  <entry>
    <title>使用Django 做服务端开发的一次尝试-3</title>
    <link href="https://blog.xuqinmin.com/2020/04/20/django%20%E5%81%9A%E6%9C%8D%E5%8A%A1%E7%AB%AF%E7%9A%84%E7%BB%83%E4%B9%A0-003/"/>
    <id>https://blog.xuqinmin.com/2020/04/20/django%20%E5%81%9A%E6%9C%8D%E5%8A%A1%E7%AB%AF%E7%9A%84%E7%BB%83%E4%B9%A0-003/</id>
    <published>2020-04-20T03:30:01.000Z</published>
    <updated>2020-04-20T03:30:46.483Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Thu May 21 2020 17:56:00 GMT+0800 (GMT+08:00) --><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Thu May 21 2020 17:56:00 GMT+0800 (GMT+08:00) --&gt;&lt;!-- rebuild by neat --&gt;
      
    
    </summary>
    
    
      <category term="python" scheme="https://blog.xuqinmin.com/categories/python/"/>
    
      <category term="django" scheme="https://blog.xuqinmin.com/categories/python/django/"/>
    
    
      <category term="python" scheme="https://blog.xuqinmin.com/tags/python/"/>
    
      <category term="django" scheme="https://blog.xuqinmin.com/tags/django/"/>
    
      <category term="restframework" scheme="https://blog.xuqinmin.com/tags/restframework/"/>
    
  </entry>
  
  <entry>
    <title>使用Django 做服务端开发的一次尝试-2</title>
    <link href="https://blog.xuqinmin.com/2020/04/17/django%20%E5%81%9A%E6%9C%8D%E5%8A%A1%E7%AB%AF%E7%9A%84%E7%BB%83%E4%B9%A0-002/"/>
    <id>https://blog.xuqinmin.com/2020/04/17/django%20%E5%81%9A%E6%9C%8D%E5%8A%A1%E7%AB%AF%E7%9A%84%E7%BB%83%E4%B9%A0-002/</id>
    <published>2020-04-17T10:06:46.000Z</published>
    <updated>2020-05-18T06:18:05.705Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Thu May 21 2020 17:56:00 GMT+0800 (GMT+08:00) --><blockquote><p>之前完成了一个django项目的新建工作，这次就做一些初始化的东西吧</p></blockquote><h4 id="1使用postgresql数据库"><a class="markdownIt-Anchor" href="#1使用postgresql数据库"></a> 1.使用postgresql数据库</h4><blockquote><p>数据库用户、密码、库 这些东西，先准备好</p></blockquote><blockquote><p>使用 <code>pip install psycopg2</code> 命令安装 <code>psycopg2</code> 作为数据库驱动，可能会遇到问题，我是直接安装了个vs2019 解决的，粗暴而简单</p></blockquote><p>修改<code>settings.py</code>文件(自己本地玩的，用户名密码就不隐藏了)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">DATABASES = &#123;</span><br><span class="line">    <span class="string">'default'</span>: &#123;</span><br><span class="line">        <span class="comment"># 'ENGINE': 'django.db.backends.sqlite3',</span></span><br><span class="line">        <span class="comment"># 'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),</span></span><br><span class="line">        <span class="string">'ENGINE'</span>: <span class="string">'django.db.backends.postgresql_psycopg2'</span>,</span><br><span class="line">        <span class="string">'NAME'</span>: <span class="string">'django-rest'</span>,  <span class="comment"># 数据库名字</span></span><br><span class="line">        <span class="string">'USER'</span>: <span class="string">'django'</span>,  <span class="comment"># 用户名</span></span><br><span class="line">        <span class="string">"PASSWORD"</span>: <span class="string">'123456'</span>,  <span class="comment"># 自己的密码</span></span><br><span class="line">        <span class="string">"HOST"</span>: <span class="string">'127.0.0.1'</span>,</span><br><span class="line">        <span class="string">'PORT'</span>: <span class="number">5432</span>,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>直接迁移数据库：<code>python manage.py migrate</code></p><p>数据库迁移完成，我习惯直接开启admin，<code>python manage.py createsuperuser</code></p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">(venv) E:\PythonProjects\djanfo_rest&gt;python manage<span class="variable">.py</span> createsuperuser</span><br><span class="line">Username (leave blank to <span class="keyword">use</span> 'xuqin'): xuqm</span><br><span class="line">Error: That username is already taken.</span><br><span class="line">Username (leave blank to <span class="keyword">use</span> 'xuqin'): admin</span><br><span class="line">Email address: <span class="number">123456</span></span><br><span class="line">Error: Enter a valid email address.</span><br><span class="line">Email address: xuqinmin12@sina<span class="variable">.com</span></span><br><span class="line">Password:</span><br><span class="line">Password (again):</span><br><span class="line">This password is too short. It must contain at least <span class="number">8</span> characters.</span><br><span class="line">This password is too common.</span><br><span class="line">This password is entirely numeric.</span><br><span class="line">Bypass password validation <span class="keyword">and</span> create user anyway? [y/N]: y</span><br><span class="line">Superuser created successfully.</span><br></pre></td></tr></table></figure><p>使用的是一个旧的数据库，所以其实已经创建过超级用户了</p><p>理论上现在可以看到管理页面了，<code>http://127.0.0.1:8000/admin</code></p><p><img src="https://xuqinmin.com/images/admin/admin_login.png" alt=""></p><p>输入刚才创建的超级用户的用户名密码，完成登录</p><p><img src="https://xuqinmin.com/images/admin/admin_administration.png" alt=""></p><p>就是长的这样子。</p><blockquote><p>现有有个问题，我这个学渣，看不懂英文。</p><p>改！</p></blockquote><p>修改<code>settings.py</code>文件</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">LANGUAGE_CODE = <span class="string">'zh-Hans'</span></span><br><span class="line"></span><br><span class="line">TIME_ZONE = <span class="string">'Asia/Harbin'</span></span><br></pre></td></tr></table></figure><p>结果就好看多了么</p><p><img src="https://xuqinmin.com/images/admin/admin_zh.png" alt=""></p><blockquote><p>下班了~</p></blockquote><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Thu May 21 2020 17:56:00 GMT+0800 (GMT+08:00) --&gt;&lt;blockquote&gt;&lt;p&gt;之前完成了一个django项目的新建工作，这次就做一些初始化的东西吧&lt;/p&gt;&lt;/blockquote&gt;&lt;h4 id=&quot;1
      
    
    </summary>
    
    
      <category term="python" scheme="https://blog.xuqinmin.com/categories/python/"/>
    
      <category term="django" scheme="https://blog.xuqinmin.com/categories/python/django/"/>
    
    
      <category term="python" scheme="https://blog.xuqinmin.com/tags/python/"/>
    
      <category term="django" scheme="https://blog.xuqinmin.com/tags/django/"/>
    
      <category term="restframework" scheme="https://blog.xuqinmin.com/tags/restframework/"/>
    
  </entry>
  
  <entry>
    <title>使用Django 做服务端开发的一次尝试-1</title>
    <link href="https://blog.xuqinmin.com/2020/04/17/django%20%E5%81%9A%E6%9C%8D%E5%8A%A1%E7%AB%AF%E7%9A%84%E7%BB%83%E4%B9%A0/"/>
    <id>https://blog.xuqinmin.com/2020/04/17/django%20%E5%81%9A%E6%9C%8D%E5%8A%A1%E7%AB%AF%E7%9A%84%E7%BB%83%E4%B9%A0/</id>
    <published>2020-04-17T06:38:24.000Z</published>
    <updated>2020-05-18T06:17:41.343Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Thu May 21 2020 17:56:00 GMT+0800 (GMT+08:00) --><blockquote><h5 id="最近在学习设计模式之前断断续续的看过好多自己也没有专门的练习和深入了解过一直感觉对应设计模式相关的东西还是处于懵懂状态这次下定决心好好的学习一下所以做一个笔记用来督促自己"><a class="markdownIt-Anchor" href="#最近在学习设计模式之前断断续续的看过好多自己也没有专门的练习和深入了解过一直感觉对应设计模式相关的东西还是处于懵懂状态这次下定决心好好的学习一下所以做一个笔记用来督促自己"></a> 最近在学习设计模式，之前断断续续的看过好多，自己也没有专门的练习和深入了解过，一直感觉对应设计模式相关的东西还是处于懵懂状态，这次下定决心好好的学习一下，所以做一个笔记用来督促自己。</h5></blockquote><blockquote><p>前段时间，想要整理一下现有的Android技术，写一个可以用的快速开发框架，然而，咸鱼依然还是咸鱼。</p><p>使用mvvm模式，写了一部分。不会放出来的，那么羞耻的东西。</p><p>重点是，想要调用接口做测试的时候，突然想起来当年玩过几天Django，接着就想，是不是可以用django写一个测试用的服务呢？</p><p>写一个试试吧。</p></blockquote><h4 id="走一步看一步吧走到哪是哪才是咸鱼的本命"><a class="markdownIt-Anchor" href="#走一步看一步吧走到哪是哪才是咸鱼的本命"></a> 走一步看一步吧，走到哪是哪才是咸鱼的本命</h4><h5 id="1新建一个项目这里我用的是-pycharm做的开发"><a class="markdownIt-Anchor" href="#1新建一个项目这里我用的是-pycharm做的开发"></a> 1.新建一个项目，这里我用的是<a href="https://www.jetbrains.com/pycharm/" target="_blank" rel="noopener"> <em>PyCharm</em></a>做的开发。</h5><blockquote><p>写到这里，突然想起来需要截图，然后想了下图片需要上传到服务器，然后想要了解下有哪些可以用的服务器，等我回来。</p></blockquote><blockquote><p>想了想，自己有个闲置的阿里云服务器，就用它吧</p><p>写了个脚本，使用 <code>python -m SimpleHTTPServer</code> 启动一个文件服务</p></blockquote><img src="https://xuqinmin.com/images/django-creat.jpg" style="zoom:50%"><blockquote><p>我的项目都是这么创建的，感觉比较方便</p><p>环境用的是anaconda 的python3.7，我本地的是3.8版本，直接使用的时候，配置postgresql的时候会出问题，没找到为啥，换了一个就好了</p></blockquote><blockquote><p>等了一会，该转的圈转完了，新建项目的工作完成了。目录结构</p></blockquote><img src="https://xuqinmin.com/images/django-creat-success.jpg" style="zoom:50%"><blockquote><p>启动一下看看效果,看看开心的小火箭。</p></blockquote><img src="https://xuqinmin.com/images/django-creat_web.jpg" alt="asdd" style="zoom:80%"><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Thu May 21 2020 17:56:00 GMT+0800 (GMT+08:00) --&gt;&lt;blockquote&gt;&lt;h5 id=&quot;最近在学习设计模式之前断断续续的看过好多自己也没有专门的练习和深入了解过一直感觉对应设计模式相关的东西还是处于
      
    
    </summary>
    
    
      <category term="python" scheme="https://blog.xuqinmin.com/categories/python/"/>
    
      <category term="django" scheme="https://blog.xuqinmin.com/categories/python/django/"/>
    
    
      <category term="python" scheme="https://blog.xuqinmin.com/tags/python/"/>
    
      <category term="django" scheme="https://blog.xuqinmin.com/tags/django/"/>
    
      <category term="restframework" scheme="https://blog.xuqinmin.com/tags/restframework/"/>
    
  </entry>
  
  <entry>
    <title>设计模式-抽象工厂模式</title>
    <link href="https://blog.xuqinmin.com/2020/04/03/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/"/>
    <id>https://blog.xuqinmin.com/2020/04/03/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/</id>
    <published>2020-04-03T05:32:01.000Z</published>
    <updated>2020-05-20T06:52:13.374Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Thu May 21 2020 17:56:00 GMT+0800 (GMT+08:00) --><blockquote><h5 id="最近在学习设计模式之前断断续续的看过好多自己也没有专门的练习和深入了解过一直感觉对应设计模式相关的东西还是处于懵懂状态这次下定决心好好的学习一下所以做一个笔记用来督促自己"><a class="markdownIt-Anchor" href="#最近在学习设计模式之前断断续续的看过好多自己也没有专门的练习和深入了解过一直感觉对应设计模式相关的东西还是处于懵懂状态这次下定决心好好的学习一下所以做一个笔记用来督促自己"></a> 最近在学习设计模式，之前断断续续的看过好多，自己也没有专门的练习和深入了解过，一直感觉对应设计模式相关的东西还是处于懵懂状态，这次下定决心好好的学习一下，所以做一个笔记用来督促自己。</h5></blockquote><h6 id="资料收集与以下网站如有冒犯烦请告知"><a class="markdownIt-Anchor" href="#资料收集与以下网站如有冒犯烦请告知"></a> 资料收集与以下网站，如有冒犯，烦请告知</h6><blockquote><p><a href="https://www.runoob.com/design-pattern/design-pattern-tutorial.html" target="_blank" rel="noopener">https://www.runoob.com/design-pattern/design-pattern-tutorial.html</a></p><p><a href="https://www.cnblogs.com/XiOrang/p/9410851.html" target="_blank" rel="noopener">https://www.cnblogs.com/XiOrang/p/9410851.html</a></p></blockquote><hr><h4 id="简单说明"><a class="markdownIt-Anchor" href="#简单说明"></a> 简单说明</h4><ol><li>抽象工厂模式，主要是围绕着一个超级工厂创建其它工厂的模式。</li><li>这个设计模式，将产品归类为多个产品族，每个单品族单独管理产品。</li><li>抽象工厂模式有多个产品。</li><li>编不下去了！！！我承认我就是个菜狗</li></ol><h4 id="简单理解"><a class="markdownIt-Anchor" href="#简单理解"></a> 简单理解</h4><ol><li>需要定义多个产品接口，包含各产品的共通的东西。</li><li>各产品实现上面的接口</li><li>定义工厂类用于生产</li><li>定义超级工厂类，用于管理上面的小工厂</li></ol><blockquote><p>之前工厂模式的时候，用了一个coder的例子。这里我把coder的技能单独比做产品来使用，不是很合适，勉强看一下吧。</p></blockquote><h4 id="1定义产品接口"><a class="markdownIt-Anchor" href="#1定义产品接口"></a> 1.定义产品接口</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//可能会的技能</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Coding</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//必会的技能</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WriteBugs</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2实现产品接口"><a class="markdownIt-Anchor" href="#2实现产品接口"></a> 2.实现产品接口</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AndroidCoding</span> <span class="keyword">implements</span> <span class="title">Coding</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.pringln(<span class="string">"Android程序员写了一段代码"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IosCoding</span> <span class="keyword">implements</span> <span class="title">Coding</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.pringln(<span class="string">"Ios程序员没写代码"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AndroidBugs</span> <span class="keyword">implements</span> <span class="title">WriteBugs</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.pringln(<span class="string">"Android程序员说没有bug的日子好寂寞啊！！！"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IosBugs</span> <span class="keyword">implements</span> <span class="title">WriteBugs</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.pringln(<span class="string">"Ios程序员说这些bug哪来的啊！！！"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3创建超级工厂抽象类"><a class="markdownIt-Anchor" href="#3创建超级工厂抽象类"></a> 3.创建超级工厂抽象类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractFactory</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> Coding <span class="title">getCoding</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> WriteBugs <span class="title">getBugs</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4创建小工厂扩展超级工厂"><a class="markdownIt-Anchor" href="#4创建小工厂扩展超级工厂"></a> 4.创建小工厂，扩展超级工厂</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AndroidFactory</span> <span class="keyword">extends</span> <span class="title">AbstractFactory</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Coding <span class="title">getCoding</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> AndroidCoding();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> WriteBugs <span class="title">getBugs</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> AndroidBugs();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IosFactory</span> <span class="keyword">extends</span> <span class="title">AbstractFactory</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Coding <span class="title">getCoding</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> IosCoding();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> WriteBugs <span class="title">getBugs</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> IosBugs();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5创建一个工厂生成器"><a class="markdownIt-Anchor" href="#5创建一个工厂生成器"></a> 5.创建一个工厂生成器</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FactoryProducer</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> AbstractFactory <span class="title">getFactory</span><span class="params">(String type)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="string">"ANDROID"</span>.equalsIgnoreCase(type))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> AndroidFactory();</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">"IOS"</span>.equalsIgnoreCase(type))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> IosFactory();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="6使用过程"><a class="markdownIt-Anchor" href="#6使用过程"></a> 6.使用过程</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(Strign[] args)</span></span>&#123;</span><br><span class="line">        AbstractFactory android = FactoryProducer.getFactory(<span class="string">"Android"</span>);</span><br><span class="line">        Coding androidCoding = android.getCoding();</span><br><span class="line">        WriteBugs androidBugs = android.getBugs();</span><br><span class="line">        androidCoding.run();</span><br><span class="line">        androidBugs.run();</span><br><span class="line">        </span><br><span class="line">        AbstractFactory ios = FactoryProducer.getFactory(<span class="string">"IOS"</span>);</span><br><span class="line">        Coding iosCoding = ios.getCoding();</span><br><span class="line">        WriteBugs iosBugs = ios.getBugs();</span><br><span class="line">        iosCoding.run();</span><br><span class="line">        iosBugs.run();</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>感觉菜鸟教程的抽象工厂模式有点问题，不知道是不是我的理解有错误。</p><p>个人觉得抽象工厂里面的小工厂应该是包含多个不同类型产品的工厂</p><p>菜鸟的教程是包含多个同一类型的产品</p></blockquote><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Thu May 21 2020 17:56:00 GMT+0800 (GMT+08:00) --&gt;&lt;blockquote&gt;&lt;h5 id=&quot;最近在学习设计模式之前断断续续的看过好多自己也没有专门的练习和深入了解过一直感觉对应设计模式相关的东西还是处于
      
    
    </summary>
    
    
      <category term="设计模式" scheme="https://blog.xuqinmin.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="android" scheme="https://blog.xuqinmin.com/tags/android/"/>
    
      <category term="java" scheme="https://blog.xuqinmin.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>设计模式-工厂模式</title>
    <link href="https://blog.xuqinmin.com/2020/04/03/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/"/>
    <id>https://blog.xuqinmin.com/2020/04/03/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/</id>
    <published>2020-04-03T03:38:24.000Z</published>
    <updated>2020-04-03T04:05:14.717Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Thu May 21 2020 17:56:00 GMT+0800 (GMT+08:00) --><blockquote><h5 id="最近在学习设计模式之前断断续续的看过好多自己也没有专门的练习和深入了解过一直感觉对应设计模式相关的东西还是处于懵懂状态这次下定决心好好的学习一下所以做一个笔记用来督促自己"><a class="markdownIt-Anchor" href="#最近在学习设计模式之前断断续续的看过好多自己也没有专门的练习和深入了解过一直感觉对应设计模式相关的东西还是处于懵懂状态这次下定决心好好的学习一下所以做一个笔记用来督促自己"></a> 最近在学习设计模式，之前断断续续的看过好多，自己也没有专门的练习和深入了解过，一直感觉对应设计模式相关的东西还是处于懵懂状态，这次下定决心好好的学习一下，所以做一个笔记用来督促自己。</h5></blockquote><h6 id="资料收集与以下网站如有冒犯烦请告知"><a class="markdownIt-Anchor" href="#资料收集与以下网站如有冒犯烦请告知"></a> 资料收集与以下网站，如有冒犯，烦请告知</h6><blockquote><p><a href="https://www.runoob.com/design-pattern/design-pattern-tutorial.html" target="_blank" rel="noopener">https://www.runoob.com/design-pattern/design-pattern-tutorial.html</a></p></blockquote><hr><h4 id="简单说明"><a class="markdownIt-Anchor" href="#简单说明"></a> 简单说明</h4><ol><li>工厂模式属于创建型设计模式的一种。</li><li>使用这个模式，我们不需要知道实例是怎么创建的，完全由工厂根据我们的需求来搞。</li><li>每次增加新实例的时候，都需要添加一个具体类和实现工厂，增加了系统的复杂度，同时也增加了系统具体类的依赖。</li><li>编不下去了！！！我承认我就是个菜狗</li></ol><h4 id="简单理解"><a class="markdownIt-Anchor" href="#简单理解"></a> 简单理解</h4><ol><li>需要定义一个接口，包含各产品的共通的东西。</li><li>各产品实现上面的接口</li><li>定义工厂类用于生产</li></ol><blockquote><p>我需要一个小伙伴陪我一起coding，奈何现实不理我，没办法，自己生产一个？？？</p></blockquote><h4 id="1定义一个接口"><a class="markdownIt-Anchor" href="#1定义一个接口"></a> 1.定义一个接口</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Coder</span></span>&#123;</span><br><span class="line">    <span class="comment">//会coding就够了，还要啥自行车</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">coding</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2来一个android的coder吧"><a class="markdownIt-Anchor" href="#2来一个android的coder吧"></a> 2.来一个Android的coder吧</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Android</span> <span class="keyword">implements</span> <span class="title">Coder</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">coding</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Android开发，在线接客！"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3其实ios开发也是可以的"><a class="markdownIt-Anchor" href="#3其实ios开发也是可以的"></a> 3.其实IOS开发也是可以的</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Ios</span> <span class="keyword">implements</span> <span class="title">Coder</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">coding</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"没有bug的日子，好寂寞！！！"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4需要一个学校培训机构来生产他们啊factory"><a class="markdownIt-Anchor" href="#4需要一个学校培训机构来生产他们啊factory"></a> 4.需要一个学校？培训机构来生产他们啊(Factory)</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CoderFactory</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Coder <span class="title">getCoder</span><span class="params">(String type)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">null</span> == type)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span>(<span class="string">"ANDROID"</span>.equalsIgnoreCase(type))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Android();</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">"IOS"</span>.equalsIgnoreCase(type))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Ios();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5神说要有光~~~"><a class="markdownIt-Anchor" href="#5神说要有光~~~"></a> 5.神说要有光~~~</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestCoder</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        CoderFactory factory = <span class="keyword">new</span> CoderFactory();</span><br><span class="line">        Android android = factory.getCoder(<span class="string">"Android"</span>);</span><br><span class="line">        Ios ios = factory.getCoder(<span class="string">"IOS"</span>);</span><br><span class="line">        android.coding();</span><br><span class="line">        ios.coding();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>梦醒了，除了嘴角有点湿，啥也没搞到。</p></blockquote><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Thu May 21 2020 17:56:00 GMT+0800 (GMT+08:00) --&gt;&lt;blockquote&gt;&lt;h5 id=&quot;最近在学习设计模式之前断断续续的看过好多自己也没有专门的练习和深入了解过一直感觉对应设计模式相关的东西还是处于
      
    
    </summary>
    
    
      <category term="设计模式" scheme="https://blog.xuqinmin.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="android" scheme="https://blog.xuqinmin.com/tags/android/"/>
    
      <category term="java" scheme="https://blog.xuqinmin.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>设计模式-单例模式</title>
    <link href="https://blog.xuqinmin.com/2020/04/03/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
    <id>https://blog.xuqinmin.com/2020/04/03/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</id>
    <published>2020-04-03T02:12:48.000Z</published>
    <updated>2020-04-03T03:27:30.163Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Thu May 21 2020 17:56:00 GMT+0800 (GMT+08:00) --><blockquote><h5 id="最近在学习设计模式之前断断续续的看过好多自己也没有专门的练习和深入了解过一直感觉对应设计模式相关的东西还是处于懵懂状态这次下定决心好好的学习一下所以做一个笔记用来督促自己"><a class="markdownIt-Anchor" href="#最近在学习设计模式之前断断续续的看过好多自己也没有专门的练习和深入了解过一直感觉对应设计模式相关的东西还是处于懵懂状态这次下定决心好好的学习一下所以做一个笔记用来督促自己"></a> 最近在学习设计模式，之前断断续续的看过好多，自己也没有专门的练习和深入了解过，一直感觉对应设计模式相关的东西还是处于懵懂状态，这次下定决心好好的学习一下，所以做一个笔记用来督促自己。</h5></blockquote><h6 id="资料收集与以下网站如有冒犯烦请告知"><a class="markdownIt-Anchor" href="#资料收集与以下网站如有冒犯烦请告知"></a> 资料收集与以下网站，如有冒犯，烦请告知</h6><blockquote><p><a href="https://www.cnblogs.com/garryfu/p/7976546.html" target="_blank" rel="noopener">https://www.cnblogs.com/garryfu/p/7976546.html</a></p></blockquote><blockquote><p><a href="http://c.biancheng.net/design_pattern/" target="_blank" rel="noopener">http://c.biancheng.net/design_pattern/</a></p></blockquote><blockquote><p><a href="https://www.runoob.com/design-pattern/design-pattern-tutorial.html" target="_blank" rel="noopener">https://www.runoob.com/design-pattern/design-pattern-tutorial.html</a></p></blockquote><hr><h4 id="简单说明"><a class="markdownIt-Anchor" href="#简单说明"></a> 简单说明</h4><ol><li>单例模式可以维持系统内某个类只有一个实例。</li><li>在系统中，日志对象、对话框、打印机驱动等通常的会设计成单例模式。</li><li>单例模式主要用来保持状态的统一，避免不同请求同时调用时，会造成状态混乱的情况。</li><li>编不下去了！！！我承认我就是个菜狗</li></ol><h4 id="简单理解"><a class="markdownIt-Anchor" href="#简单理解"></a> 简单理解</h4><ol><li>类的构造器私有化</li><li>内部实例化</li><li>外部全局访问</li></ol><h4 id="静态常量实现-饿汉式"><a class="markdownIt-Anchor" href="#静态常量实现-饿汉式"></a> 静态常量实现 饿汉式</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line">    <span class="comment">//私有化构造函数</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//静态常量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton instance = <span class="keyword">new</span> Singleton();</span><br><span class="line"><span class="comment">//外部访问接口</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//提供一个外部访问方法，用来测试</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"创建成功"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">a</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Singleton.getInstance().print();<span class="comment">//测试</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="静态代码块实现-饿汉式"><a class="markdownIt-Anchor" href="#静态代码块实现-饿汉式"></a> 静态代码块实现 - 饿汉式</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span></span>&#123;</span><br><span class="line">    <span class="comment">//私有化构造函数</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singletonton</span><span class="params">()</span></span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//静态代码块实现</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance;</span><br><span class="line">    <span class="keyword">static</span>&#123;</span><br><span class="line">        instance = <span class="keyword">new</span> Singleton();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//提供一个外部访问的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="模式特点"><a class="markdownIt-Anchor" href="#模式特点"></a> 模式特点</h4><ol><li>饿汉式单例，在类加载的时候就已经创建好了一个静态对象供系统使用，以后不再改变，所以是线程安全的，可以直接用于多线程</li></ol><h4 id="线程不安全的-懒汉式"><a class="markdownIt-Anchor" href="#线程不安全的-懒汉式"></a> 线程不安全的 - 懒汉式</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">null</span> == instance)</span><br><span class="line">            instance = <span class="keyword">new</span> Singleton();</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="线程安全的-懒汉式"><a class="markdownIt-Anchor" href="#线程安全的-懒汉式"></a> 线程安全的 - 懒汉式</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> Singleton <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">null</span> == instance)</span><br><span class="line">            instance = <span class="keyword">new</span> Singleton();</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="模式特点-2"><a class="markdownIt-Anchor" href="#模式特点-2"></a> 模式特点</h4><ol><li>懒汉式单例模式，使用了延迟加载的方式，只有在调用<code>getInstance()</code>方法时才会进行实例化</li><li>第一种模式虽然可以做到延时加载，但是在多线程的使用场景中容易出现多实例的情况</li><li>第二种模式添加了<code>synchronized</code>同步锁，使得该方法变成了线程安全的方式，但是多数情况下是不需要同步的，所以该模式运行效率很低。</li></ol><h4 id="双重校验锁模式"><a class="markdownIt-Anchor" href="#双重校验锁模式"></a> 双重校验锁模式</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">null</span> == instance)&#123;</span><br><span class="line">            <span class="keyword">synchronized</span>(Singleton<span class="class">.<span class="keyword">class</span>)</span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(<span class="keyword">null</span> == instance)&#123;</span><br><span class="line">                    instance = <span class="keyword">new</span> Singleton();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="模式特点-3"><a class="markdownIt-Anchor" href="#模式特点-3"></a> 模式特点</h4><ol><li>延迟加载</li><li>第一次判断<code>instance</code>为空的时候，会进入同步锁，进入同步锁的线程根据再次判断的情况，实例化<code>Singleton</code>,第二次访问的时候，<code>instance</code>不为空，则不进入同步锁，保证了执行效率。</li></ol><h4 id="静态内部类模式"><a class="markdownIt-Anchor" href="#静态内部类模式"></a> 静态内部类模式</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonHolder</span></span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance = <span class="keyword">new</span> Singleton();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> SingletonHolder.instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="模式特点-4"><a class="markdownIt-Anchor" href="#模式特点-4"></a> 模式特点</h4><ol><li>多线程并发下，线程是安全的</li><li>但是遇到序列号对象时，默认的方式运行得到的结果就是多例的。</li></ol><h4 id="枚举模式"><a class="markdownIt-Anchor" href="#枚举模式"></a> 枚举模式</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> Singleton&#123;</span><br><span class="line">    INSTANCE;</span><br><span class="line">    <span class="keyword">private</span> String test = <span class="string">"singleton"</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(a);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//测试一下</span></span><br><span class="line"><span class="keyword">public</span> test&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Singleton.INSTANCE.print();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Thu May 21 2020 17:56:00 GMT+0800 (GMT+08:00) --&gt;&lt;blockquote&gt;&lt;h5 id=&quot;最近在学习设计模式之前断断续续的看过好多自己也没有专门的练习和深入了解过一直感觉对应设计模式相关的东西还是处于
      
    
    </summary>
    
    
      <category term="设计模式" scheme="https://blog.xuqinmin.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="android" scheme="https://blog.xuqinmin.com/tags/android/"/>
    
      <category term="java" scheme="https://blog.xuqinmin.com/tags/java/"/>
    
  </entry>
  
</feed>
